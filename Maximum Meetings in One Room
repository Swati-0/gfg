class Solution {
public:
    static bool comp(pair<pair<int,int>,int> &a, pair<pair<int,int>,int> &b){
        if (a.first.second == b.first.second)
            return a.first.first < b.first.first;
        return a.first.second < b.first.second;
    }

    vector<int> maxMeetings(int N, vector<int> &S, vector<int> &F) {
        vector<int> ans;
        vector<pair<pair<int, int>, int>> meetings;  // To store meeting times along with their original indices

        for(int i = 0; i < N; i++){
            meetings.push_back({{S[i], F[i]}, i + 1});
        }

        sort(meetings.begin(), meetings.end(), comp);

        int lastEndTime = meetings[0].first.second;
        ans.push_back(meetings[0].second);

        for(int i = 0; i < N; i++){
            if(meetings[i].first.first > lastEndTime){
                lastEndTime = meetings[i].first.second;
                ans.push_back(meetings[i].second);
            }
        }
        sort(ans.begin(), ans.end());
        return ans;
    }
};
