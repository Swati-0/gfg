/* Tree node structure

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x){
        data = x;
        left = right = NULL;
    }
};*/

class Solution
{
    int findposition(int in[], int element, int n){
        for(int i=0; i<n; i++){
            if(in[i]==element)
            return i;
        }
        return -1;
    }
    Node* solve(int in[], int post[], int &index, int poststart, int postend, int n){
        if(index<0 || poststart>postend){
            return NULL;
        }
        int element=post[index--];
        Node* root=new Node(element);
        int position=findposition(in,element,n);
        root->right=solve(in,post, index, position+1, postend, n);
        root->left=solve(in, post, index, poststart, position-1, n);
        return root;
    }
    public:

    //Function to return a tree created from postorder and inoreder traversals.
    Node *buildTree(int in[], int post[], int n) {
        // Your code here
        int postorderindex=n-1;
        Node* ans=solve(in,post,postorderindex,0,n-1,n);
        return ans;
    }
};
